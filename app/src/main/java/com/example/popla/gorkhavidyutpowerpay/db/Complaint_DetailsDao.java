package com.example.popla.gorkhavidyutpowerpay.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPLAINT__DETAILS".
*/
public class Complaint_DetailsDao extends AbstractDao<Complaint_Details, Long> {

    public static final String TABLENAME = "COMPLAINT__DETAILS";

    /**
     * Properties of entity Complaint_Details.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Complaint_No = new Property(0, Long.class, "Complaint_No", true, "COMPLAINT__NO");
        public final static Property Comp_K_No = new Property(1, String.class, "Comp_K_No", false, "COMP__K__NO");
        public final static Property Comp_Login_Id = new Property(2, String.class, "Comp_Login_Id", false, "COMP__LOGIN__ID");
        public final static Property Comp_Date = new Property(3, String.class, "Comp_Date", false, "COMP__DATE");
        public final static Property Comp_Msg = new Property(4, String.class, "Comp_Msg", false, "COMP__MSG");
        public final static Property Comp_Status = new Property(5, String.class, "Comp_Status", false, "COMP__STATUS");
    }


    public Complaint_DetailsDao(DaoConfig config) {
        super(config);
    }
    
    public Complaint_DetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPLAINT__DETAILS\" (" + //
                "\"COMPLAINT__NO\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Complaint_No
                "\"COMP__K__NO\" TEXT," + // 1: Comp_K_No
                "\"COMP__LOGIN__ID\" TEXT," + // 2: Comp_Login_Id
                "\"COMP__DATE\" TEXT," + // 3: Comp_Date
                "\"COMP__MSG\" TEXT," + // 4: Comp_Msg
                "\"COMP__STATUS\" TEXT);"); // 5: Comp_Status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPLAINT__DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Complaint_Details entity) {
        stmt.clearBindings();
 
        Long Complaint_No = entity.getComplaint_No();
        if (Complaint_No != null) {
            stmt.bindLong(1, Complaint_No);
        }
 
        String Comp_K_No = entity.getComp_K_No();
        if (Comp_K_No != null) {
            stmt.bindString(2, Comp_K_No);
        }
 
        String Comp_Login_Id = entity.getComp_Login_Id();
        if (Comp_Login_Id != null) {
            stmt.bindString(3, Comp_Login_Id);
        }
 
        String Comp_Date = entity.getComp_Date();
        if (Comp_Date != null) {
            stmt.bindString(4, Comp_Date);
        }
 
        String Comp_Msg = entity.getComp_Msg();
        if (Comp_Msg != null) {
            stmt.bindString(5, Comp_Msg);
        }
 
        String Comp_Status = entity.getComp_Status();
        if (Comp_Status != null) {
            stmt.bindString(6, Comp_Status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Complaint_Details entity) {
        stmt.clearBindings();
 
        Long Complaint_No = entity.getComplaint_No();
        if (Complaint_No != null) {
            stmt.bindLong(1, Complaint_No);
        }
 
        String Comp_K_No = entity.getComp_K_No();
        if (Comp_K_No != null) {
            stmt.bindString(2, Comp_K_No);
        }
 
        String Comp_Login_Id = entity.getComp_Login_Id();
        if (Comp_Login_Id != null) {
            stmt.bindString(3, Comp_Login_Id);
        }
 
        String Comp_Date = entity.getComp_Date();
        if (Comp_Date != null) {
            stmt.bindString(4, Comp_Date);
        }
 
        String Comp_Msg = entity.getComp_Msg();
        if (Comp_Msg != null) {
            stmt.bindString(5, Comp_Msg);
        }
 
        String Comp_Status = entity.getComp_Status();
        if (Comp_Status != null) {
            stmt.bindString(6, Comp_Status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Complaint_Details readEntity(Cursor cursor, int offset) {
        Complaint_Details entity = new Complaint_Details( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Complaint_No
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Comp_K_No
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Comp_Login_Id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Comp_Date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Comp_Msg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Comp_Status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Complaint_Details entity, int offset) {
        entity.setComplaint_No(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setComp_K_No(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComp_Login_Id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComp_Date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setComp_Msg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComp_Status(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Complaint_Details entity, long rowId) {
        entity.setComplaint_No(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Complaint_Details entity) {
        if(entity != null) {
            return entity.getComplaint_No();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Complaint_Details entity) {
        return entity.getComplaint_No() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
