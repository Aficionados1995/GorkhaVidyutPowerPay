package com.example.popla.gorkhavidyutpowerpay.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLOYEE".
*/
public class EmployeeDao extends AbstractDao<Employee, Long> {

    public static final String TABLENAME = "EMPLOYEE";

    /**
     * Properties of entity Employee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Emp_id = new Property(0, Long.class, "emp_id", true, "EMP_ID");
        public final static Property Emp_name = new Property(1, String.class, "emp_name", false, "EMP_NAME");
        public final static Property Emp_email_id = new Property(2, String.class, "emp_email_id", false, "EMP_EMAIL_ID");
        public final static Property Emp_mobile = new Property(3, String.class, "emp_mobile", false, "EMP_MOBILE");
        public final static Property Emp_age = new Property(4, String.class, "emp_age", false, "EMP_AGE");
        public final static Property Emp_designation = new Property(5, String.class, "emp_designation", false, "EMP_DESIGNATION");
    }


    public EmployeeDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYEE\" (" + //
                "\"EMP_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: emp_id
                "\"EMP_NAME\" TEXT," + // 1: emp_name
                "\"EMP_EMAIL_ID\" TEXT," + // 2: emp_email_id
                "\"EMP_MOBILE\" TEXT," + // 3: emp_mobile
                "\"EMP_AGE\" TEXT," + // 4: emp_age
                "\"EMP_DESIGNATION\" TEXT);"); // 5: emp_designation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYEE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Employee entity) {
        stmt.clearBindings();
 
        Long emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindLong(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String emp_email_id = entity.getEmp_email_id();
        if (emp_email_id != null) {
            stmt.bindString(3, emp_email_id);
        }
 
        String emp_mobile = entity.getEmp_mobile();
        if (emp_mobile != null) {
            stmt.bindString(4, emp_mobile);
        }
 
        String emp_age = entity.getEmp_age();
        if (emp_age != null) {
            stmt.bindString(5, emp_age);
        }
 
        String emp_designation = entity.getEmp_designation();
        if (emp_designation != null) {
            stmt.bindString(6, emp_designation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Employee entity) {
        stmt.clearBindings();
 
        Long emp_id = entity.getEmp_id();
        if (emp_id != null) {
            stmt.bindLong(1, emp_id);
        }
 
        String emp_name = entity.getEmp_name();
        if (emp_name != null) {
            stmt.bindString(2, emp_name);
        }
 
        String emp_email_id = entity.getEmp_email_id();
        if (emp_email_id != null) {
            stmt.bindString(3, emp_email_id);
        }
 
        String emp_mobile = entity.getEmp_mobile();
        if (emp_mobile != null) {
            stmt.bindString(4, emp_mobile);
        }
 
        String emp_age = entity.getEmp_age();
        if (emp_age != null) {
            stmt.bindString(5, emp_age);
        }
 
        String emp_designation = entity.getEmp_designation();
        if (emp_designation != null) {
            stmt.bindString(6, emp_designation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Employee readEntity(Cursor cursor, int offset) {
        Employee entity = new Employee( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // emp_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // emp_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // emp_email_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emp_mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // emp_age
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // emp_designation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Employee entity, int offset) {
        entity.setEmp_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmp_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmp_email_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmp_mobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmp_age(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmp_designation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Employee entity, long rowId) {
        entity.setEmp_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Employee entity) {
        if(entity != null) {
            return entity.getEmp_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Employee entity) {
        return entity.getEmp_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
